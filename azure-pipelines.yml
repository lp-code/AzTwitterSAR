# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '45a6fef4-d860-401b-9ec2-7d6c0101f1f0'

  # Function app name
  functionAppName: 'func-rkh-twittersar-dev'

  # ARM template location
  armTemplateLocation: 'https://raw.githubusercontent.com/lp-code/AzTwitterSAR/master/infrastructure/'

  # Agent VM image name
  vmImageName: vs2017-win2016

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/azTwitterSar'

stages:
- stage: CreateCloudResources
  displayName: Create cloud resources

  jobs:
  - job: Create
    displayName: Create
    
    steps:
    - task: AzureResourceGroupDeployment@2
      displayName: 'Deploy template'
      inputs:
        ConnectedServiceName: 'ConnectDevopsToAzure_rg-rkh-twittersarvestpd-dev'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'rg-rkh-twittersarvestpd-dev'
        location: 'norwayeast'
        templateLocation: 'URL of the file'
        csmFileLink: '$(armTemplateLocation)aztwittersar_template.json'
        csmParametersFileLink: '$(armTemplateLocation)aztwittersar_parameters.json'
        deploymentMode: 'Complete'
        deploymentName: 'AzTwitterSAR-Pipeline'

- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
